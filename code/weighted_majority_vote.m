function [final_vote] = weighted_majority_vote(classes, weights, Yhat)
% Given a collection of classes, weights, and predictions, this function
% will generate a final multi-class weighted majority vote
%
% From source adapted from 
%
%   http://stackoverflow.com/questions/15498368/efficient-multiclass-weighted-majority-voting-implementation-in-matlab
%   
%   by "Dan" (http://stackoverflow.com/users/1011724/dan) on 03/19/2013
%
%   [classes] All unique classes that could potentially appear in the
%     prediction matrix, Yhat
%
%   [weights] 1 x K; The relative assigned to each algorithm that generated 
%     the predictions in Yhat. The weight weights(i) corresponds to the 
%     predictions from the i-th algorithm that generated Yhat(i)
%
%   [Yhat] The N x K prediction matrix, where the i-th column specifies
%     the predictions generated by the i-th model
%
%   [final_vote] N x 1 vector containing the final, weighted vote
%
[~, K] = size(Yhat);

% One weight must be given per model
assert(K == numel(weights));

classes = classes';

% Make a cube of the options that is number of options by K x N
class_cube = repmat(classes, [1, size(weights, 2), size(Yhat, 1)]);

% Compare the votes (stretched to make surface) against a uniforma surface of each option
B = bsxfun(@eq, permute(Yhat, [3 2 1]), class_cube);

% Find a weighted sum
W = squeeze(sum(bsxfun(@times, repmat(weights, size(classes, 1), 1), B), 2))';

% Find the options with the highest weighted sum
[~, i] = max(W, [], 2);

final_vote = Yhat(i);
end
